{"version":3,"file":"index.mjs","sources":["../lib/iget.js","../lib/iset.js","../lib/copy_array.js","../lib/main.js","../lib/validate.js","../lib/get.js","../lib/set.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport parent from '@stdlib/ndarray-base-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar base = parent.prototype.iget;\n\n\n// MAIN //\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @throws {TypeError} index must be an integer\n* @throws {RangeError} index exceeds array dimensions\n* @returns {*} array element\n*/\nfunction iget( idx ) {\n\tif ( this._ndims > 0 ) {\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( '0jp5O', idx ) );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, this._mode );\n\t\treturn base.call( this, idx );\n\t}\n\treturn base.call( this );\n}\n\n\n// EXPORTS //\n\nexport default iget;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// METHODS //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport parent from '@stdlib/ndarray-base-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar base = parent.prototype.iset;\n\n\n// MAIN //\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @private\n* @param {integer} [idx] - linear view index\n* @param {*} v - value to set\n* @throws {Error} cannot write to a read-only array\n* @throws {TypeError} index must be an integer\n* @throws {RangeError} index exceeds array dimensions\n* @returns {ndarray} ndarray instance\n*/\nfunction iset( idx, v ) {\n\tif ( this._flags.READONLY ) {\n\t\tthrow new Error( format('0jp0e') );\n\t}\n\tif ( this._ndims > 0 ) {\n\t\tif ( !isInteger( idx ) ) {\n\t\t\tthrow new TypeError( format( '0jp5O', idx ) );\n\t\t}\n\t\tidx = getIndex( idx, this._length-1, this._mode );\n\t\tbase.call( this, idx, v );\n\t} else {\n\t\tbase.call( this, idx );\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default iset;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Copies the contents of array-like value to a new array.\n*\n* @private\n* @param {ArrayLike} arr - input array\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} output array\n*\n* @example\n* var arr = [ 1.0, 2.0, 3.0 ];\n*\n* var out = copy( arr, arr.length );\n* // returns [ 1.0, 2.0, 3.0 ]\n*\n* var bool = ( arr === out );\n* // returns false\n*/\nfunction copy( arr, len ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default copy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isCollection from '@stdlib/assert-is-collection';\nimport { primitives as isNonNegativeIntegerArray } from '@stdlib/assert-is-nonnegative-integer-array';\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isFunction from '@stdlib/assert-is-function';\nimport isOrder from '@stdlib/ndarray-base-assert-is-order';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isBufferLengthCompatible from '@stdlib/ndarray-base-assert-is-buffer-length-compatible';\nimport numel from '@stdlib/ndarray-base-numel';\nimport parent from '@stdlib/ndarray-base-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport defaults from '@stdlib/ndarray-defaults';\nimport inherit from '@stdlib/utils-inherit';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport iget from './iget.js';\nimport iset from './iset.js';\nimport get from './get.js';\nimport set from './set.js';\nimport copy from './copy_array.js';\nimport validate from './validate.js';\n\n\n// VARIABLES //\n\n/*\n* See the following references:\n*\n* -  https://stackoverflow.com/questions/22747068/is-there-a-max-number-of-arguments-javascript-functions-can-accept\n* -  https://bugs.webkit.org/show_bug.cgi?id=80797\n* -  https://github.com/numpy/numpy/issues/5744\n*\n* Note that the maximum number of function arguments can vary from engine to engine. Here, we choose something of a lowest common denominator which may **not** be valid everywhere.\n*/\nvar MAX_DIMS = 32767|0;\n\nvar INDEX_MODE = defaults.get( 'index_mode' );\nvar READONLY = false;\n\n\n// MAIN //\n\n/**\n* ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*/\nfunction ndarray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar ndims;\n\tvar opts;\n\tvar err;\n\tvar sh;\n\tvar st;\n\n\tif ( !(this instanceof ndarray) ) {\n\t\tif ( arguments.length < 7 ) {\n\t\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new ndarray( dtype, buffer, shape, strides, offset, order, options ); // eslint-disable-line max-len\n\t}\n\tif ( !isDataType( dtype ) ) {\n\t\tthrow new TypeError( format( '0jp5P', dtype ) );\n\t}\n\tif ( !isCollection( buffer ) ) {\n\t\tthrow new TypeError( format( '0jp5Q', buffer ) );\n\t} else if ( buffer.get && buffer.set && ( !isFunction( buffer.get ) || !isFunction( buffer.set ) ) ) { // eslint-disable-line max-len\n\t\tthrow new TypeError( format( '0jp5R', buffer ) );\n\t}\n\tif ( !isNonNegativeIntegerArray( shape ) ) {\n\t\tif ( !isCollection( shape) || shape.length > 0 ) {\n\t\t\tthrow new TypeError( format( '0jp5S', shape ) );\n\t\t}\n\t}\n\tndims = shape.length;\n\tif ( ndims > MAX_DIMS ) {\n\t\tthrow new RangeError( format( '0jp5T', MAX_DIMS, ndims ) );\n\t}\n\tif ( !isIntegerArray( strides ) ) {\n\t\tthrow new TypeError( format( '0jp5U', strides ) );\n\t}\n\tif ( ndims > 0 ) {\n\t\tif ( strides.length !== ndims ) {\n\t\t\tthrow new RangeError( format( '0jp5V', ndims, strides.length ) );\n\t\t}\n\t} else if ( strides.length !== 1 ) {\n\t\tthrow new RangeError( format('0jp0f') );\n\t} else if ( strides[ 0 ] !== 0 ) {\n\t\tthrow new RangeError( format( '0jpDt', strides[ 0 ] ) );\n\t}\n\tif ( !isNonNegativeInteger( offset ) ) {\n\t\tthrow new TypeError( format( '0jp5X', offset ) );\n\t}\n\tif ( !isOrder( order ) ) {\n\t\tthrow new TypeError( format( '0jp5Y', order ) );\n\t}\n\tif ( ndims > 0 && !isBufferLengthCompatible( buffer.length, shape, strides, offset ) && numel( shape ) > 0 ) { // eslint-disable-line max-len\n\t\tthrow new Error( format('0jpCz') );\n\t}\n\topts = {};\n\topts.mode = INDEX_MODE;\n\topts.readonly = READONLY;\n\tif ( arguments.length > 6 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tthis._mode = opts.mode;\n\tif ( opts.submode === void 0 ) {\n\t\topts.submode = [ this._mode ];\n\t}\n\tthis._submode = opts.submode;\n\n\t// Copy `shape` and `strides` to prevent external mutation:\n\tsh = copy( shape, ndims );\n\tst = copy( strides, ndims || 1 );\n\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, sh, st, offset, order );\n\tthis._flags.READONLY = opts.readonly;\n\n\treturn this;\n\n\t/* eslint-enable no-invalid-this */\n}\n\n// Inherit from the parent constructor:\ninherit( ndarray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof ndarray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = ndarray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( ndarray, 'name', 'ndarray' );\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name get\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'get', get );\n\n/**\n* Returns an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the input argument is ignored and, for clarity, should not be provided.\n*\n* @name iget\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @returns {*} array element\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*/\nsetReadOnly( ndarray.prototype, 'iget', iget );\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @name set\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.get( 1, 1 );\n* // returns 4\n*\n* x.set( 1, 1, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.get( 1, 1 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'set', set );\n\n/**\n* Sets an array element located at a specified linear index.\n*\n* ## Notes\n*\n* -   For zero-dimensional arrays, the first, and only, argument should be the value to set.\n*\n* @name iset\n* @memberof ndarray.prototype\n* @type {Function}\n* @param {integer} [idx] - linear index\n* @param {*} v - value to set\n* @returns {ndarray} ndarray instance\n*\n* @example\n* var buffer = [ 1, 2, 3, 4, 5, 6 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var x = ndarray( 'generic', buffer, shape, strides, offset, 'row-major' );\n*\n* var v = x.iget( 3 );\n* // returns 4\n*\n* x.iset( 3, 10 );\n*\n* var b = x.data;\n* // returns [ 1, 2, 3, 10, 5, 6 ]\n*\n* v = x.iget( 3 );\n* // returns 10\n*/\nsetReadOnly( ndarray.prototype, 'iset', iset );\n\n\n// EXPORTS //\n\nexport default ndarray;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isArray from '@stdlib/assert-is-array';\nimport isIndexMode from '@stdlib/ndarray-base-assert-is-index-mode';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.mode] - specifies how to handle indices which exceed array dimensions\n* @param {string} [options.submode] - specifies how to handle subscripts which exceed array dimensions\n* @param {boolean} [options.readonly] - boolean indicating whether an array should be read-only\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'mode': 'clamp',\n*     'submode': [ 'throw', 'wrap', 'clamp' ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tvar i;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0jp2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\topts.mode = options.mode;\n\t\tif ( !isIndexMode( opts.mode ) ) {\n\t\t\treturn new TypeError( format( '0jp5a', 'mode', opts.mode ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'submode' ) ) {\n\t\topts.submode = options.submode;\n\t\tif ( !isArray( opts.submode ) ) {\n\t\t\treturn new TypeError( format( '0jp5b', 'submode', opts.submode ) );\n\t\t}\n\t\tif ( opts.submode.length === 0 ) {\n\t\t\treturn new TypeError( format( '0jp5b', 'submode', opts.submode.join( ',' ) ) );\n\t\t}\n\t\tfor ( i = 0; i < opts.submode.length; i++ ) {\n\t\t\tif ( !isIndexMode( opts.submode[ i ] ) ) {\n\t\t\t\treturn new TypeError( format( '0jp5c', opts.submode[ i ] ) );\n\t\t\t}\n\t\t}\n\t\topts.submode = opts.submode.slice();\n\t}\n\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\topts.readonly = options.readonly;\n\t\tif ( !isBoolean( opts.readonly ) ) {\n\t\t\treturn new TypeError( format( '0jp2o', 'readonly', opts.readonly ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @throws {TypeError} provided indices must be integer valued\n* @throws {RangeError} index exceeds array dimensions\n* @throws {RangeError} number of indices must equal the number of dimensions\n* @returns {*} array element\n*/\nfunction get() {\n\tvar idx;\n\tvar ind;\n\tvar M;\n\tvar i;\n\n\tif ( arguments.length !== this._ndims ) {\n\t\tthrow new RangeError( format( '0jp5M', this._ndims, arguments.length ) );\n\t}\n\tidx = this._offset;\n\tM = this._submode.length;\n\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( '0jp5N', i, arguments[ i ] ) );\n\t\t}\n\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, this._submode[ i%M ] ); // eslint-disable-line max-len\n\t\tidx += this._strides[ i ] * ind;\n\t}\n\tif ( this._accessors ) {\n\t\treturn this._buffer.get( idx );\n\t}\n\treturn this._buffer[ idx ];\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport getIndex from '@stdlib/ndarray-base-ind';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Sets an array element.\n*\n* ## Notes\n*\n* -   The number of indices should **equal** the number of dimensions. Accordingly, for zero-dimensional arrays, no indices should be provided.\n*\n* @private\n* @param {...integer} [idx] - indices\n* @param {*} v - value to set\n* @throws {Error} cannot write to a read-only array\n* @throws {TypeError} provided indices must be integer valued\n* @throws {RangeError} index exceeds array dimensions\n* @throws {RangeError} number of indices must equal the number of dimensions\n* @returns {ndarray} ndarray instance\n*/\nfunction set() {\n\tvar idx;\n\tvar ind;\n\tvar M;\n\tvar i;\n\n\tif ( this._flags.READONLY ) {\n\t\tthrow new Error( format('0jp0e') );\n\t}\n\tif ( arguments.length !== this._ndims+1 ) {\n\t\tthrow new RangeError( format( '0jp5M', this._ndims, arguments.length ) );\n\t}\n\tidx = this._offset;\n\tM = this._submode.length;\n\tfor ( i = 0; i < arguments.length-1; i++ ) {\n\t\tif ( !isInteger( arguments[ i ] ) ) {\n\t\t\tthrow new TypeError( format( '0jpDu', i, arguments[ i ] ) );\n\t\t}\n\t\tind = getIndex( arguments[ i ], this._shape[ i ]-1, this._submode[ i%M ] ); // eslint-disable-line max-len\n\t\tidx += this._strides[ i ] * ind;\n\t}\n\tif ( this._accessors ) {\n\t\tthis._buffer.set( arguments[ i ], idx );\n\t} else {\n\t\tthis._buffer[ idx ] = arguments[ i ];\n\t}\n\treturn this;\n}\n\n\n// EXPORTS //\n\nexport default set;\n"],"names":["base","parent","prototype","iget","iset","copy","arr","len","out","i","push","INDEX_MODE","defaults","get","ndarray","dtype","buffer","shape","strides","offset","order","options","ndims","opts","err","sh","st","this","arguments","length","isDataType","TypeError","format","isCollection","set","isFunction","isNonNegativeIntegerArray","RangeError","isIntegerArray","isNonNegativeInteger","isOrder","isBufferLengthCompatible","numel","Error","mode","readonly","isObject","hasOwnProp","isIndexMode","submode","isArray","join","slice","isBoolean","validate","_mode","_submode","call","_flags","READONLY","inherit","setReadOnly","idx","ind","M","_ndims","_offset","isInteger","getIndex","_shape","_strides","_accessors","_buffer","_length","v"],"mappings":"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"}